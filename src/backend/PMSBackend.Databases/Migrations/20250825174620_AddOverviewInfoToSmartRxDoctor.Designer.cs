// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMSBackend.Databases.Data;

#nullable disable

namespace PMSBackend.Databases.Migrations
{
    [DbContext(typeof(PMSDbContext))]
    [Migration("20250825174620_AddOverviewInfoToSmartRxDoctor")]
    partial class AddOverviewInfoToSmartRxDoctor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_AdviceFAQEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconFileExtension")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IconFileName")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IconFilePath")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TagSearchKeyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_AdviceFAQ");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_ChiefComplaintEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("FullForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_ChiefComplaint");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_CityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(5)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_City");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_CountryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(3)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_Country");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DepartmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SectionId");

                    b.ToTable("Configuration_Department");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DepartmentSectionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_DepartmentSection");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DesignationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_Designation");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DiagnosisCenterWiseTestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiagnosticCenterGivenPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("DiagnosticCenterGivenTestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("DiscountByAuthority")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PriceUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReportDeliveryTime")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Schedule")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("TestCenterBranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestCenterId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PriceUnitId");

                    b.HasIndex("TestCenterId");

                    b.HasIndex("TestId");

                    b.ToTable("Configuration_DiagnosisCenterWiseTest");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DistrictEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(2)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_District");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DoctorChamberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ChamberAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)");

                    b.Property<long>("ChamberCityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChamberClosedOnDay")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChamberDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChamberEmail")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ChamberEndTime")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ChamberGoogleAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ChamberGoogleLocationLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ChamberGoogleRating")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ChamberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChamberOtherDoctorsId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChamberOverseasCaller")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChamberPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ChamberStartTime")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ChamberType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChamberVisitingHours")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ChamberWhatsAppNumber")
                        .HasColumnType("nvarchar(25)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentSectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("DoctorBookingMobileNos")
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("DoctorDesignationInChamberId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("DoctorSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Helpline_CallCenter")
                        .HasColumnType("nvarchar(15)");

                    b.Property<long>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainChamber")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VisitingHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentSectionId");

                    b.HasIndex("DoctorDesignationInChamberId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_DoctorChamber");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DoctorEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BMDCRegNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChamberIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationDegreeIds")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Experiences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessionalSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SpecializedArea")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("YearOfExperiences")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_Doctor");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_EducationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_Education");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_HospitalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CloseDay")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CloseTime")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DiagnosticCenterIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("GoogleLocation")
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("GoogleRating")
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainBranch")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OpenDay")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OpenTime")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("WebAddress")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Weekend")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("YearEstablished")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_Hospital");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_InvestigationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(5)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NationalPriceUnitId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("NationalUnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long?>("PriceUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Specimen")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TestDescription")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TestFullName")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TestGenericName")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TestNameByDiagnosticCenter")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TestShortName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NationalPriceUnitId");

                    b.HasIndex("PriceUnitId");

                    b.ToTable("Configuration_Investigation");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_InvestigationFAQEntitiy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InvestigationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_InvestigationFAQ");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineBrandEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("BrandPublicId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<long>("ManufacturerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_MedicineBrand");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineDosageFormEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_MedicineDosageForm");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Administration")
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("CompanyDiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Contradiction")
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DAR")
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("DosageFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("DoseDescription")
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("GenericId")
                        .HasColumnType("bigint");

                    b.Property<string>("Indication")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Interaction")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("MeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModeOfAction")
                        .HasColumnType("nvarchar(1)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OverdoseEffects")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PackageQuantity")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PackageSize")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PackageType")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Pharmacology")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PrecautionsAndWarnings")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PregnencyAndLactation")
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("PriceInUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("StorageCondition")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Strength")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TherapeuticClass")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UserFor")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DosageFormId");

                    b.HasIndex("GenericId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PriceInUnitId");

                    b.ToTable("Configuration_Medicine");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineFAQEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("MedicineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_MedicineFAQ");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineGenericEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_MedicineGeneric");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineManufactureInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyUrl")
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Importer")
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OriginRegion")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Products")
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_MedicineManufactureInfo");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_PoliceStationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_PoliceStation");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_PrescriptionSectionsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeadlineText")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_PrescriptionSection");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_SmartRxAcronymEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_SmartRxAcronym");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_TagsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagDescription")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TagPrescriptionSection")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TagShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_Tags");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_UnitEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(4)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_Unit");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_VitalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicableEntity")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nchar(2)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ExtremeRange")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ExtremeStatus")
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("HighRange")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("HighStatus")
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("LowRange")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("LowStatus")
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("MidNextRange")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("MidNextStatus")
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("MidRange")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("MidStatus")
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UnitId");

                    b.ToTable("Configuration_Vital");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_VitalFAQEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconFileExtension")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IconFileName")
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IconFilePath")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TagSearchKeyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<long>("VitalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Configuration_VitalFAQ");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Prescription_UploadEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CompletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountPercentageOnInvestigationByDoctor")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("DiscountPercentageOnMedicineByDoctor")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("HasExistingRelative")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExistingPatient")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReported")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSmartRxRequested")
                        .HasColumnType("bit");

                    b.Property<long?>("LockedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextAppoinmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextAppoinmentTime")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NumberOfFilesStoredForThisPrescription")
                        .HasColumnType("int");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("PrescriptionCode")
                        .IsRequired()
                        .HasColumnType("nchar(20)");

                    b.Property<long?>("RecommendedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RecommendedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RelativePatientIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReportById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDetails")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ReportReason")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("SmartRxId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag1")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag2")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag3")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag4")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag5")
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CompletedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FolderId");

                    b.HasIndex("LockedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PatientId");

                    b.HasIndex("RecommendedById");

                    b.HasIndex("ReportById");

                    b.HasIndex("SmartRxId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescription_Upload");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Prescription_UserWiseFolderEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FolderHierarchy")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ParentFolderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescription_UserWiseFolder");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxRoleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsSelfService")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Security_PMSRole");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxUserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AuthMethod")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FacebookId")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("SmartRxUserEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TwitterId")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("SmartRxUserEntityId");

                    b.ToTable("Security_PMSUser");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxUserRoleEntity", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RoleId");

                    b.ToTable("Security_PMSUserWiseRole");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_MasterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChiefComplaintIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompletedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountPercentageOnInvestigationByDoctor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentageOnMedicineByDoctor")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool?>("HasAnyRelative")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInvestigationFavourite")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasMedicineFavourite")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExistingPatient")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReported")
                        .HasColumnType("bit");

                    b.Property<long?>("LockedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextAppoinmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextAppoinmentTime")
                        .HasColumnType("varchar(10)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RecommendedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RecommendedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("RejectedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReportById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDetails")
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("ReportReason")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Tag1")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag2")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag3")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag4")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tag5")
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CompletedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LockedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("RecommendedById");

                    b.HasIndex("RejectedById");

                    b.HasIndex("ReportById");

                    b.HasIndex("UserId");

                    b.ToTable("SmartRx_Master");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientAdviceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdviceKeywordToRecommend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SmartRxMasterId");

                    b.ToTable("SmartRx_PatientAdvice");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientChiefComplaintEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChiefComplaintId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.Property<long>("UploadedPrescriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChiefComplaintId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SmartRxMasterId");

                    b.HasIndex("UploadedPrescriptionId");

                    b.ToTable("SmartRx_PatientChiefComplaint");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientDoctorEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActiveChamberId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ChamberFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("ChamberFeeMeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChamberWaitTimeHour")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChamberWaitTimeMinute")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ConsultingDurationInMinutes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DoctorRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OtherExpense")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TransportExpense")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ChamberFeeMeasurementUnitId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SmartRxMasterId");

                    b.ToTable("SmartRx_PatientDoctor");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientHistoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SmartRxMasterId");

                    b.ToTable("SmartRx_PatientHistory");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientInvestigationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DiagnosticCenterWiseTestId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountByAuthority")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("DoctorRecommendedTestCenterIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PriceUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TestPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserSelectedTestCenterIds")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Wishlist")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DiagnosticCenterWiseTestId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("PriceUnitId");

                    b.HasIndex("SmartRxMasterId");

                    b.HasIndex("TestId");

                    b.ToTable("SmartRx_PatientInvestigation");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientMedicineEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionForMoreThanRegularDose")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Dose10InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose11InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose12InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose1InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose2InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose3InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose4InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose5InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose6InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose7InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose8InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dose9InADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DurationOfContinuation")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DurationOfContinuationCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DurationOfContinuationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DurationOfContinuationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrequencyInADay")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsBeforeMeal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMoreThanRegularDose")
                        .HasColumnType("bit");

                    b.Property<long>("MedicineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Restrictions")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Wishlist")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MedicineId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SmartRxMasterId");

                    b.ToTable("SmartRx_PatientMedicine");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("Age")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ExistingPatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("HeightFeet")
                        .HasColumnType("int");

                    b.Property<decimal?>("HeightInches")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("HeightMeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExistingPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRelative")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PatientCode")
                        .IsRequired()
                        .HasColumnType("nchar(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("PoliceStationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ProfileProgress")
                        .HasColumnType("int");

                    b.Property<long?>("RelatedToPatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelationToPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("WeightMeasurementUnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExistingPatientId");

                    b.HasIndex("HeightMeasurementUnitId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PoliceStationId");

                    b.HasIndex("RelatedToPatientId");

                    b.HasIndex("WeightMeasurementUnitId");

                    b.ToTable("SmartRx_PatientProfile");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientRelativesEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientRelativeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SmartRx_MasterEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientRelativeId");

                    b.HasIndex("SmartRx_MasterEntityId");

                    b.ToTable("SmartRx_PatientRelatives");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientVitalsEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HeightFeet")
                        .HasColumnType("int");

                    b.Property<decimal?>("HeightInches")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.Property<long>("VitalId")
                        .HasColumnType("bigint");

                    b.Property<string>("VitalStatus")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("VitalValue")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SmartRxMasterId");

                    b.HasIndex("VitalId");

                    b.ToTable("SmartRx_PatientVitals");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientWishlistEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PatientMedicineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientRecommendedTestCenterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientTestId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientWishListMedicineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientWishlistMedicineId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.Property<string>("WishListType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PatientRecommendedTestCenterId");

                    b.HasIndex("PatientTestId");

                    b.HasIndex("PatientWishListMedicineId");

                    b.HasIndex("PatientWishlistMedicineId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SmartRxMasterId");

                    b.ToTable("SmartRx_PatientWishlist");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_ReferredConsultantEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReferredConsultantId")
                        .HasColumnType("bigint");

                    b.Property<long>("SmartRxMasterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReferredConsultantId");

                    b.HasIndex("SmartRxMasterId");

                    b.ToTable("SmartRx_ReferredConsultant");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_AdviceFAQEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_ChiefComplaintEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_CityEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DistrictEntity", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("District");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_CountryEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DepartmentEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_HospitalEntity", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DepartmentSectionEntity", "DepartmentSection")
                        .WithMany("Departments")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DepartmentSection");

                    b.Navigation("Hospital");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DepartmentSectionEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_HospitalEntity", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Hospital");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DesignationEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DiagnosisCenterWiseTestEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitId");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_HospitalEntity", "DiagnosticTestCenter")
                        .WithMany()
                        .HasForeignKey("TestCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_InvestigationEntity", "DiagnosticTest")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DiagnosticTest");

                    b.Navigation("DiagnosticTestCenter");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PriceUnit");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DistrictEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DoctorChamberEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DepartmentEntity", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DepartmentSectionEntity", "DepartmentSection")
                        .WithMany()
                        .HasForeignKey("DepartmentSectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DesignationEntity", "DoctorDesignationInChamber")
                        .WithMany()
                        .HasForeignKey("DoctorDesignationInChamberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DoctorEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_HospitalEntity", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("DepartmentSection");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorDesignationInChamber");

                    b.Navigation("Hospital");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DoctorEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_EducationEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_HospitalEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_InvestigationEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "NationalPriceUnit")
                        .WithMany()
                        .HasForeignKey("NationalPriceUnitId");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("NationalPriceUnit");

                    b.Navigation("PriceUnit");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_InvestigationFAQEntitiy", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineBrandEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_MedicineManufactureInfoEntity", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Manufacturer");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineDosageFormEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_MedicineBrandEntity", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_MedicineDosageFormEntity", "MedicineDosageForm")
                        .WithMany()
                        .HasForeignKey("DosageFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_MedicineGenericEntity", "Generic")
                        .WithMany()
                        .HasForeignKey("GenericId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceInUnitId");

                    b.Navigation("Brand");

                    b.Navigation("CreatedBy");

                    b.Navigation("Generic");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("MedicineDosageForm");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PriceUnit");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineFAQEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineGenericEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineManufactureInfoEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_PoliceStationEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DistrictEntity", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("District");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_PrescriptionSectionsEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_SmartRxAcronymEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_TagsEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_UnitEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_VitalEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_VitalFAQEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Prescription_UploadEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UserWiseFolderEntity", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "RecommendedBy")
                        .WithMany()
                        .HasForeignKey("RecommendedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ReportBy")
                        .WithMany()
                        .HasForeignKey("ReportById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRx")
                        .WithMany()
                        .HasForeignKey("SmartRxId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CompletedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Folder");

                    b.Navigation("LockedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PatientProfile");

                    b.Navigation("RecommendedBy");

                    b.Navigation("ReportBy");

                    b.Navigation("SmartRx");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Prescription_UserWiseFolderEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UserWiseFolderEntity", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentFolderId");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ParentFolder");

                    b.Navigation("PatientProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxRoleEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxUserEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", null)
                        .WithMany("Users")
                        .HasForeignKey("SmartRxUserEntityId");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxUserRoleEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxRoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_MasterEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "RecommendedBy")
                        .WithMany()
                        .HasForeignKey("RecommendedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "RejectedBy")
                        .WithMany()
                        .HasForeignKey("RejectedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ReportBy")
                        .WithMany()
                        .HasForeignKey("ReportById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "PrescriptionUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("CompletedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("LockedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PatientProfile");

                    b.Navigation("Prescription");

                    b.Navigation("PrescriptionUser");

                    b.Navigation("RecommendedBy");

                    b.Navigation("RejectedBy");

                    b.Navigation("ReportBy");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientAdviceEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany("SmartRx_PatientAdvice")
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Prescription");

                    b.Navigation("SmartRxMaster");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientChiefComplaintEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_ChiefComplaintEntity", "Configuration_ChiefComplaint")
                        .WithMany()
                        .HasForeignKey("ChiefComplaintId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRx_Master")
                        .WithMany()
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription_Upload")
                        .WithMany()
                        .HasForeignKey("UploadedPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration_ChiefComplaint");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Prescription_Upload");

                    b.Navigation("SmartRx_Master");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientDoctorEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "ChamberFeeMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("ChamberFeeMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DoctorEntity", "PatientDoctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany()
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChamberFeeMeasurementUnit");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PatientDoctor");

                    b.Navigation("Prescription");

                    b.Navigation("SmartRxMaster");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientHistoryEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription")
                        .WithMany("SmartRx_PatientHistory")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany("SmartRx_PatientHistory")
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Prescription");

                    b.Navigation("SmartRxMaster");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientInvestigationEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_DiagnosisCenterWiseTestEntity", "DiagnosticCenterWiseTest")
                        .WithMany()
                        .HasForeignKey("DiagnosticCenterWiseTestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany("SmartRx_PatientInvestigation")
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_InvestigationEntity", "InvestigationTest")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DiagnosticCenterWiseTest");

                    b.Navigation("InvestigationTest");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Prescription");

                    b.Navigation("PriceUnit");

                    b.Navigation("SmartRxMaster");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientMedicineEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_MedicineEntity", "Medicine")
                        .WithMany("SmartRx_PatientMedicine")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription")
                        .WithMany("SmartRx_PatientMedicine")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany("SmartRx_PatientMedicine")
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Medicine");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Prescription");

                    b.Navigation("SmartRxMaster");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.Configuration_CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "ExistingPatientProfile")
                        .WithMany()
                        .HasForeignKey("ExistingPatientId");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "HeightUnit")
                        .WithMany()
                        .HasForeignKey("HeightMeasurementUnitId");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_PoliceStationEntity", "PoliceStation")
                        .WithMany()
                        .HasForeignKey("PoliceStationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "RelatedToPatientProfile")
                        .WithMany()
                        .HasForeignKey("RelatedToPatientId");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_UnitEntity", "WeightUnit")
                        .WithMany()
                        .HasForeignKey("WeightMeasurementUnitId");

                    b.Navigation("City");

                    b.Navigation("CreatedBy");

                    b.Navigation("ExistingPatientProfile");

                    b.Navigation("HeightUnit");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PoliceStation");

                    b.Navigation("RelatedToPatientProfile");

                    b.Navigation("WeightUnit");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientRelativesEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "ExistingRelativePatient")
                        .WithMany()
                        .HasForeignKey("PatientRelativeId");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", null)
                        .WithMany("ExistingRelativePatient")
                        .HasForeignKey("SmartRx_MasterEntityId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ExistingRelativePatient");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientVitalsEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientProfileEntity", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany("PatientVitals")
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_VitalEntity", "Vital")
                        .WithMany()
                        .HasForeignKey("VitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PatientProfile");

                    b.Navigation("Prescription");

                    b.Navigation("SmartRxMaster");

                    b.Navigation("Vital");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_PatientWishlistEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_HospitalEntity", "RecommendedTestCenter")
                        .WithMany()
                        .HasForeignKey("PatientRecommendedTestCenterId");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_InvestigationEntity", "InvestigationTest")
                        .WithMany()
                        .HasForeignKey("PatientTestId");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_MedicineEntity", "PatientWishListMedicine")
                        .WithMany()
                        .HasForeignKey("PatientWishListMedicineId");

                    b.HasOne("PMSBackend.Domain.Entities.Configuration_MedicineEntity", "PatientMedicine")
                        .WithMany()
                        .HasForeignKey("PatientWishlistMedicineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.Prescription_UploadEntity", "PrescriptionUpload")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany()
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("InvestigationTest");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PatientMedicine");

                    b.Navigation("PatientWishListMedicine");

                    b.Navigation("PrescriptionUpload");

                    b.Navigation("RecommendedTestCenter");

                    b.Navigation("SmartRxMaster");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_ReferredConsultantEntity", b =>
                {
                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRxUserEntity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_PatientDoctorEntity", "ReferredConsultant")
                        .WithMany()
                        .HasForeignKey("ReferredConsultantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMSBackend.Domain.Entities.SmartRx_MasterEntity", "SmartRxMaster")
                        .WithMany()
                        .HasForeignKey("SmartRxMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReferredConsultant");

                    b.Navigation("SmartRxMaster");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_CountryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_DepartmentSectionEntity", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Configuration_MedicineEntity", b =>
                {
                    b.Navigation("SmartRx_PatientMedicine");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.Prescription_UploadEntity", b =>
                {
                    b.Navigation("SmartRx_PatientHistory");

                    b.Navigation("SmartRx_PatientMedicine");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxRoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRxUserEntity", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PMSBackend.Domain.Entities.SmartRx_MasterEntity", b =>
                {
                    b.Navigation("ExistingRelativePatient");

                    b.Navigation("PatientVitals");

                    b.Navigation("SmartRx_PatientAdvice");

                    b.Navigation("SmartRx_PatientHistory");

                    b.Navigation("SmartRx_PatientInvestigation");

                    b.Navigation("SmartRx_PatientMedicine");
                });
#pragma warning restore 612, 618
        }
    }
}
